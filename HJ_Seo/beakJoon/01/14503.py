""" # g5 14503 로봇청소기.
봇 청소기가 주어졌을 때, 청소하는 영역의 개수를 구하는 프로그램을 작성하시오.

로봇 청소기가 있는 장소는 NxM 크기의 직사각형으로 나타낼 수 있으며, 1x1크기의 정사각형 칸으로 나누어져 있다. 각각의 칸은 벽 또는 빈 칸이다. 
청소기는 바라보는 방향이 있으며, 이 방향은 동, 서, 남, 북중 하나이다. 지도의 북쪽에서부터 r번째, 서쪽에서부터 c번째로 위치한 칸은 (r, c)로 나타낼 수 있다.

로봇 청소기는 다음과 같이 작동한다.

1. 현재 위치를 청소한다. 현재 위치에서 다음을 반복하면서 인접한 칸을 탐색한다.
2. 현재 위치의 바로 왼쪽에 아직 청소하지 않은 빈 공간이 존재한다면, 왼쪽 방향으로 회전한 다음 한 칸을 전진하고 1번으로 돌아간다. 
2-1. 그렇지 않을 경우, 왼쪽 방향으로 회전한다. 이때, 왼쪽은 현재 바라보는 방향을 기준으로 한다.
3. 1번으로 돌아가거나 후진하지 않고 2-1번 단계가 연속으로 네 번 실행되었을 경우, 바로 뒤쪽이 벽이라면 작동을 멈춘다. ####### stop_point.
3-1. 그렇지 않다면 한 칸 후진한다.
================================================
입력
첫째 줄에 세로 크기 N과 가로 크기 M이 주어진다. (3 ≤ N, M ≤ 50)

둘째 줄에 로봇 청소기가 있는 칸의 좌표 (r, c)와 바라보는 방향 d가 주어진다. 
d가 0인 경우에는 북쪽을, 1인 경우에는 동쪽을, 2인 경우에는 남쪽을, 3인 경우에는 서쪽을 바라보고 있는 것이다.

셋째 줄부터 N개의 줄에 장소의 상태가 북쪽부터 남쪽 순서대로, 각 줄은 서쪽부터 동쪽 순서대로 주어진다. 
빈 칸은 0, 벽은 1로 주어진다. 지도의 첫 행, 마지막 행, 첫 열, 마지막 열에 있는 모든 칸은 벽이다.

로봇 청소기가 있는 칸의 상태는 항상 빈 칸이다.

================================================
출력
로봇 청소기가 청소하는 칸의 개수를 출력한다.

"""

N, M = map(int,input().strip().split())

row,col,dir = map(int,input().strip().split())
on = [row,col] # [남북,동서] ##예제 1을 통해 이 역시 0으로 시작하는 위치는 벽인 것을 짐작.. 

floor = [[] for i in range(N)]   # NxM 바닥을 만들기 위한 토대.
for i in range(N):
    floor[i] = list(map(int,input().strip().split()))  #벽새우기.

# for i in range(N):
#     print(floor[i]) #바닥 체크.. done.

#북서남동이 차례대로 0,3,2,1.
 #반쯤 수도코드.  [1,1]에서의 방향.... 차례대로 [1,0],[2,1],[1,2],[0,1]
# 0일때 -1, 3일때 0, 2일때 1, 1일때 0..  ==> -abs(x-2)+1  (동서 움직임.)
# 0일때 0, 3일때 1, 2일때 0, 1일때 -1..  ==> +abs(x-1)-1  (남북 움직임.)
#
def changehandler(on,dir,floor):  #on은 현재 위치, dir은 청소기가 바라보는 방향, floor는 바닥. ; 청소기의 다음 방향과 위치를 제어해주는 함수
    # print('시작방향 = ',dir)
    for i in range(4):
        check_on =[on[0]+abs(dir-1)-1,on[1]-abs(dir-2)+1]  #dir에 따른 탐색할 곳 살펴보기.(항상 방향기준 왼쪽.)
        # print('check_on = ',check_on)
        if floor[check_on[0]][check_on[1]] != 0:  #이미 청소가 되었거나(2) 벽으로 막힌경우(1) 왼쪽회전만.
            dir = (dir+3)%4
            # print('dir = ',dir)
        
        else:
            return check_on, (dir+3)%4 #청소가 안된곳이면(0) 청소기가 움직인 위치와 방향을 리턴.
    
    # 동서남북이 다 청소되었거나 막혔을 때 리턴할 위치,방향,False.
    left = (dir+3)%4
    back_on = [on[0]+abs(left-1)-1,on[1]-abs(left-2)+1] #후진.

    return back_on, dir

cnt = 0 #청소한 횟수 카운터.
while True:
    #dir(방향.. 0 : 북, 1 : 동, 2 : 남, 3 : 서)
    #청소한 곳은 숫자를 2로 바꿔서 인지(정확히, 0이 아닌 것으로 바꾸면 될듯?)
    if floor[on[0]][on[1]] == 0:  #현재 위치가 청소가 안된 곳일 경우, 청소 및 카운트+1
        floor[on[0]][on[1]] = 2 
        cnt += 1

    on,dir = changehandler(on,dir,floor) #청소기가 움직임. #return on,dir
    # print(on, cnt)   #####확인용. cnt의 경우 청소기가 움직인 직후라서 현재 움직인 위치는 청소가 되지 않은 경우임.
    
    if floor[on[0]][on[1]] == 1:
        break #벽으로 들어감. 즉, 청소가 불가능한 공간으로 들어갈 수 밖에 없기 때문에 청소 끝.

print(cnt)  #결과.
# for i in range(N):  #####바닥 체크..
#     print(' '.join(map(str,floor[i])))  
